
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="Biswajit Sahoo">
    <meta name="generator" content="Hugo 0.104.2">
    <title><%= title %></title>

    <link rel="canonical" href="https://getbootstrap.com/docs/5.2/examples/sidebars/">
    <script src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
    
    
    

    

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi" crossorigin="anonymous">
    <!-- Favicons -->
<!-- <link rel="apple-touch-icon" href="/docs/5.2/assets/img/favicons/apple-touch-icon.png" sizes="180x180">
<link rel="icon" href="/docs/5.2/assets/img/favicons/favicon-32x32.png" sizes="32x32" type="image/png">
<link rel="icon" href="/docs/5.2/assets/img/favicons/favicon-16x16.png" sizes="16x16" type="image/png">
<link rel="manifest" href="/docs/5.2/assets/img/favicons/manifest.json">
<link rel="mask-icon" href="/docs/5.2/assets/img/favicons/safari-pinned-tab.svg" color="#712cf9">
<link rel="icon" href="/docs/5.2/assets/img/favicons/favicon.ico"> -->
<link rel="icon" href="/img/logo.svg">
<meta name="theme-color" content="#712cf9">


    <style>
      .bd-placeholder-img {
        font-size: 1.125rem;
        text-anchor: middle;
        -webkit-user-select: none;
        -moz-user-select: none;
        user-select: none;
      }

      @media (min-width: 768px) {
        .bd-placeholder-img-lg {
          font-size: 3.5rem;
        }
      }

      .b-example-divider {
        height: 3rem;
        background-color: rgba(0, 0, 0, .1);
        border: solid rgba(0, 0, 0, .15);
        border-width: 1px 0;
        box-shadow: inset 0 .5em 1.5em rgba(0, 0, 0, .1), inset 0 .125em .5em rgba(0, 0, 0, .15);
      }

      .b-example-vr {
        flex-shrink: 0;
        width: 1.5rem;
        height: 100vh;
      }

      .bi {
        vertical-align: -.125em;
        fill: currentColor;
      }

      .nav-scroller {
        position: relative;
        z-index: 2;
        height: 2.75rem;
        overflow-y: hidden;
      }

      .nav-scroller .nav {
        display: flex;
        flex-wrap: nowrap;
        padding-bottom: 1rem;
        margin-top: -1px;
        overflow-x: auto;
        text-align: center;
        white-space: nowrap;
        -webkit-overflow-scrolling: touch;
      }

      .nav-menu:hover {
        background-color: #ced4da;
      }
      .nav-menu:active {
        background-color: #495057;
      }
    </style>
    <style>
      #callControl {
        height: 15%; 
        /* display: flex;  */
        display: none;
        flex-direction: column;
        flex-wrap: nowrap;
        align-content: center;
        justify-content: space-around;
        align-items: center;
      }
      #live {
      /* position: absolute; */
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      width: 100%;
      height: 100%;
      background-color: #000;
      display: none;
  }
  #videoPanel {
      display: none;
      /* display: flex */
      flex-direction: column;
      flex-wrap: nowrap;
      align-content: center;
      justify-content: space-evenly;
      align-items: center;
      height: 35%;
      width: 40%;
      box-shadow: 0px 0px 7px 0px darkgrey;
      border-radius: 10px;
  }
  #local-video {
      position: absolute;
      /* bottom: 0; */
      right: 0;
      width: 25%;
      /* -webkit-transform: scaleX(-1); */
      transform: scaleX(-1);
      margin: 16px;
      border: 2px solid #fff;
  }
  #remote-video {
      /* position: absolute; */
      width: 100%;
      height: 100%;
      /* top: 50%;
      left: 50%;
      transform: translate(-50%, -50%); */
  }
  #end-call {
      position: absolute;
      bottom: 0;
      right: 0;
      padding: 8px;
      background-color: red;
      color: white;
      border: none;
      margin: 16px;
  }

  #chatPage {
    display: flex;
    /* display: none; */
    width: 100%;
    height: 100%;
    flex-direction: column;
    flex-wrap: nowrap;
    align-content: center;
    justify-content: space-between;
    align-items: center;
  }
  #chat{
      background-color: rgb(210, 210, 210);
      background: url('/img/chat-back.png');
      width: 100%;
      height: 91%;
      overflow-x: hidden;
      overflow-y: auto;


  }
  /* input:active {
    border: 0;
    box-shadow: 0px 0px 3px;
  } */
  #msg{
    background-color: #f8f9fa;
    border-radius: 10px;
    width: fit-content;
    height: fit-content;
    margin-left: 1%;
    margin-top: 1%;
    /* border: solid; */
    padding: 10px 10px 10px 10px;
    display: flex;
    max-width: 50%;
    font-family: system-ui;
    border: 0;
    box-sizing: content-box;
    box-shadow: 0px 0px 3px 0px;
    margin-right: 1%;
  }

  #msg p {
    margin-bottom: 1%;
    overflow-wrap: anywhere;
  }

  #msgBlock {
    display: flex;
    flex-direction: row;
    /* justify-content: flex-end; */
    align-content: center;
    align-items: center;
    flex-wrap: nowrap;
  }

  #typingBox {
    display: flex;
    flex-direction: row;
    flex-wrap: nowrap;
    align-content: center;
    justify-content: flex-start;
    align-items: stretch;
    width: 100%;
    height: 7%;
    /* margin-bottom: 0.8%; */
    margin-bottom: 8px;
    margin-top: 8px; 

  }
  #stream_parent_caller {
      display: none;
      /* display: flex */
      flex-direction: column;
      flex-wrap: nowrap;
      align-content: center;
      justify-content: space-evenly;
      align-items: center;
      height: 35%;
      width: 40%;
      box-shadow: 0px 0px 7px 0px darkgrey;
      border-radius: 10px;
  }
  #stream_parent_receiver {
    display:none;
    /* display: flex; */
    width: 85%;
    height: 75%;
    flex-direction: column;
    flex-wrap: nowrap;
    align-content: center;
    justify-content: space-around;
    align-items: center;
  }
  #endStreamBtn {
    height: 5%;
    border-radius: 10px;
    background-color: aliceblue;
    width: inherit;
    font-family: system-ui;
    border: 0;
    box-shadow: 0px 0px 2px 0px;
  }
  #stream_parent_receiver video{
    width: 95%;
    height: 92%;
    border: solid;
    border-radius: 10px;
  }

  #share_parent {
      display: none;
      /* display: flex */
      margin-top: 20px;
      margin-left: 20px;
      margin-left: 20px;
      margin-bottom: 20px;
      align-self: center;
      width: 51rem;
      height: 36rem;
  }
  #sharePanel {
      display: none;
      /* display: flex */
      flex-direction: column;
      flex-wrap: nowrap;
      align-content: center;
      justify-content: space-evenly;
      align-items: center;
      height: 35%;
      width: 40%;
      box-shadow: 0px 0px 7px 0px darkgrey;
      border-radius: 10px;
  }
  #audio_parent {
      display: none;
      margin-top: 20px;
      margin-left: 20px;
      margin-left: 20px;
      margin-bottom: 20px;
      align-self: center;
  }
  #game_board {
      border: solid;
      width: fit-content;
      height: fit-content;

  }
  #row {
      
      width: fit-content;
      height: fit-content;
      display: flex;
      align-content: stretch;
  }
  .square {
      border: solid;
      width: 100px;
      height: 100px;
      margin: 0px 0px 0px 0px;
      display: flex;
      flex-direction: row;
      flex-wrap: nowrap;
      align-content: flex-start;
      justify-content: center;
      align-items: baseline;
  }
  #squareContent {
      width: 100px;
      height: 100px;
      font-size: 80px;
      margin-top: 0px;
      margin-bottom: 0px;
      padding: 0;
      display: flex;
      flex-direction: row;
      align-content: center;
      align-items: center;
      justify-content: center;
      
  }
  #gameConsole {
      display: none;
      /* display: flex; */
      align-content: stretch;
      padding: 5%;
      border-radius: 10px;
      box-shadow: 0px 0px 5px;
      /* margin-top: 20px;
      margin-left: 20px;
      margin-left: 20px;
      margin-bottom: 20px; */
  }
  #gamePanel {
      display: none;
      /* display: flex */
      flex-direction: column;
      flex-wrap: nowrap;
      align-content: center;
      justify-content: space-evenly;
      align-items: center;
      height: 35%;
      width: 40%;
      box-shadow: 0px 0px 7px 0px darkgrey;
      border-radius: 10px;
  }
  #resetBtn {
    border-radius: 10px;
    border: 0;
    box-shadow: 0px 0px 2px;
    margin-top: 5%;
    font-family: system-ui;
    font-weight: bold;
  }
  #exitBtn {
    border-radius: 10px;
    border: 0;
    box-shadow: 0px 0px 2px;
    margin-top: 5%;
    font-family: system-ui;
    font-weight: bold;
  }
  #scoreBoard {
      width: fit-content;
      height: fit-content;
      margin-left: 4%;
      font-weight: bold;
      font-family: system-ui;
      
  }
  #options {
      display: none;
  }
  #workspace {
    display: flex;
    width: 100%;
    /* height: 100rem; */
    flex-direction: row;
    flex-wrap: nowrap;
    align-content: center;
    justify-content: center;
    align-items: center;
  }

  * {
    box-sizing: border-box;
  }

  

  /* .container {
    padding: 100px 30px;
    width: 100%;
    margin: 0 auto;
    max-width: 900px;
  } */

  .image-stack {
    display: grid;
    position: relative;
    grid-template-columns: repeat(12, 1fr);
  }

  .image-stack__item--top {
    grid-column: 4/-1;
    grid-row: 1;
    padding-top: 20%;
    z-index: 1;
    
  }

  .image-stack__item--bottom {
    grid-row: 1;
    grid-column: 1/span 8;
    
  }

  .image-stack img {
    width: 100%;
    display: block;
  }
  </style>

    
    <!-- Custom styles for this template -->
    <link href="/css/sidebars.css" rel="stylesheet">
  </head>
  <body>
    
<svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
  <symbol id="bootstrap" viewBox="0 0 118 94">
    <title>Bootstrap</title>
    <path fill-rule="evenodd" clip-rule="evenodd" d="M24.509 0c-6.733 0-11.715 5.893-11.492 12.284.214 6.14-.064 14.092-2.066 20.577C8.943 39.365 5.547 43.485 0 44.014v5.972c5.547.529 8.943 4.649 10.951 11.153 2.002 6.485 2.28 14.437 2.066 20.577C12.794 88.106 17.776 94 24.51 94H93.5c6.733 0 11.714-5.893 11.491-12.284-.214-6.14.064-14.092 2.066-20.577 2.009-6.504 5.396-10.624 10.943-11.153v-5.972c-5.547-.529-8.934-4.649-10.943-11.153-2.002-6.484-2.28-14.437-2.066-20.577C105.214 5.894 100.233 0 93.5 0H24.508zM80 57.863C80 66.663 73.436 72 62.543 72H44a2 2 0 01-2-2V24a2 2 0 012-2h18.437c9.083 0 15.044 4.92 15.044 12.474 0 5.302-4.01 10.049-9.119 10.88v.277C75.317 46.394 80 51.21 80 57.863zM60.521 28.34H49.948v14.934h8.905c6.884 0 10.68-2.772 10.68-7.727 0-4.643-3.264-7.207-9.012-7.207zM49.948 49.2v16.458H60.91c7.167 0 10.964-2.876 10.964-8.281 0-5.406-3.903-8.178-11.425-8.178H49.948z"></path>
  </symbol>
  <symbol id="home" viewBox="0 0 16 16">
    <path d="M8.354 1.146a.5.5 0 0 0-.708 0l-6 6A.5.5 0 0 0 1.5 7.5v7a.5.5 0 0 0 .5.5h4.5a.5.5 0 0 0 .5-.5v-4h2v4a.5.5 0 0 0 .5.5H14a.5.5 0 0 0 .5-.5v-7a.5.5 0 0 0-.146-.354L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293L8.354 1.146zM2.5 14V7.707l5.5-5.5 5.5 5.5V14H10v-4a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5v4H2.5z"/>
  </symbol>
  <symbol id="speedometer2" viewBox="0 0 16 16">
    <path d="M8 4a.5.5 0 0 1 .5.5V6a.5.5 0 0 1-1 0V4.5A.5.5 0 0 1 8 4zM3.732 5.732a.5.5 0 0 1 .707 0l.915.914a.5.5 0 1 1-.708.708l-.914-.915a.5.5 0 0 1 0-.707zM2 10a.5.5 0 0 1 .5-.5h1.586a.5.5 0 0 1 0 1H2.5A.5.5 0 0 1 2 10zm9.5 0a.5.5 0 0 1 .5-.5h1.5a.5.5 0 0 1 0 1H12a.5.5 0 0 1-.5-.5zm.754-4.246a.389.389 0 0 0-.527-.02L7.547 9.31a.91.91 0 1 0 1.302 1.258l3.434-4.297a.389.389 0 0 0-.029-.518z"/>
    <path fill-rule="evenodd" d="M0 10a8 8 0 1 1 15.547 2.661c-.442 1.253-1.845 1.602-2.932 1.25C11.309 13.488 9.475 13 8 13c-1.474 0-3.31.488-4.615.911-1.087.352-2.49.003-2.932-1.25A7.988 7.988 0 0 1 0 10zm8-7a7 7 0 0 0-6.603 9.329c.203.575.923.876 1.68.63C4.397 12.533 6.358 12 8 12s3.604.532 4.923.96c.757.245 1.477-.056 1.68-.631A7 7 0 0 0 8 3z"/>
  </symbol>
  <symbol id="table" viewBox="0 0 16 16">
    <path d="M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2zm15 2h-4v3h4V4zm0 4h-4v3h4V8zm0 4h-4v3h3a1 1 0 0 0 1-1v-2zm-5 3v-3H6v3h4zm-5 0v-3H1v2a1 1 0 0 0 1 1h3zm-4-4h4V8H1v3zm0-4h4V4H1v3zm5-3v3h4V4H6zm4 4H6v3h4V8z"/>
  </symbol>
  <symbol id="people-circle" viewBox="0 0 16 16">
    <path d="M11 6a3 3 0 1 1-6 0 3 3 0 0 1 6 0z"/>
    <path fill-rule="evenodd" d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm8-7a7 7 0 0 0-5.468 11.37C3.242 11.226 4.805 10 8 10s4.757 1.225 5.468 2.37A7 7 0 0 0 8 1z"/>
  </symbol>
  <symbol id="grid" viewBox="0 0 16 16">
    <path d="M1 2.5A1.5 1.5 0 0 1 2.5 1h3A1.5 1.5 0 0 1 7 2.5v3A1.5 1.5 0 0 1 5.5 7h-3A1.5 1.5 0 0 1 1 5.5v-3zM2.5 2a.5.5 0 0 0-.5.5v3a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 .5-.5v-3a.5.5 0 0 0-.5-.5h-3zm6.5.5A1.5 1.5 0 0 1 10.5 1h3A1.5 1.5 0 0 1 15 2.5v3A1.5 1.5 0 0 1 13.5 7h-3A1.5 1.5 0 0 1 9 5.5v-3zm1.5-.5a.5.5 0 0 0-.5.5v3a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 .5-.5v-3a.5.5 0 0 0-.5-.5h-3zM1 10.5A1.5 1.5 0 0 1 2.5 9h3A1.5 1.5 0 0 1 7 10.5v3A1.5 1.5 0 0 1 5.5 15h-3A1.5 1.5 0 0 1 1 13.5v-3zm1.5-.5a.5.5 0 0 0-.5.5v3a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 .5-.5v-3a.5.5 0 0 0-.5-.5h-3zm6.5.5A1.5 1.5 0 0 1 10.5 9h3a1.5 1.5 0 0 1 1.5 1.5v3a1.5 1.5 0 0 1-1.5 1.5h-3A1.5 1.5 0 0 1 9 13.5v-3zm1.5-.5a.5.5 0 0 0-.5.5v3a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 .5-.5v-3a.5.5 0 0 0-.5-.5h-3z"/>
  </symbol>
  <symbol id="collection" viewBox="0 0 16 16">
    <path d="M2.5 3.5a.5.5 0 0 1 0-1h11a.5.5 0 0 1 0 1h-11zm2-2a.5.5 0 0 1 0-1h7a.5.5 0 0 1 0 1h-7zM0 13a1.5 1.5 0 0 0 1.5 1.5h13A1.5 1.5 0 0 0 16 13V6a1.5 1.5 0 0 0-1.5-1.5h-13A1.5 1.5 0 0 0 0 6v7zm1.5.5A.5.5 0 0 1 1 13V6a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-.5.5h-13z"/>
  </symbol>
  <symbol id="calendar3" viewBox="0 0 16 16">
    <path d="M14 0H2a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zM1 3.857C1 3.384 1.448 3 2 3h12c.552 0 1 .384 1 .857v10.286c0 .473-.448.857-1 .857H2c-.552 0-1-.384-1-.857V3.857z"/>
    <path d="M6.5 7a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm-9 3a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm-9 3a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"/>
  </symbol>
  <symbol id="chat-quote-fill" viewBox="0 0 16 16">
    <path d="M16 8c0 3.866-3.582 7-8 7a9.06 9.06 0 0 1-2.347-.306c-.584.296-1.925.864-4.181 1.234-.2.032-.352-.176-.273-.362.354-.836.674-1.95.77-2.966C.744 11.37 0 9.76 0 8c0-3.866 3.582-7 8-7s8 3.134 8 7zM7.194 6.766a1.688 1.688 0 0 0-.227-.272 1.467 1.467 0 0 0-.469-.324l-.008-.004A1.785 1.785 0 0 0 5.734 6C4.776 6 4 6.746 4 7.667c0 .92.776 1.666 1.734 1.666.343 0 .662-.095.931-.26-.137.389-.39.804-.81 1.22a.405.405 0 0 0 .011.59c.173.16.447.155.614-.01 1.334-1.329 1.37-2.758.941-3.706a2.461 2.461 0 0 0-.227-.4zM11 9.073c-.136.389-.39.804-.81 1.22a.405.405 0 0 0 .012.59c.172.16.446.155.613-.01 1.334-1.329 1.37-2.758.942-3.706a2.466 2.466 0 0 0-.228-.4 1.686 1.686 0 0 0-.227-.273 1.466 1.466 0 0 0-.469-.324l-.008-.004A1.785 1.785 0 0 0 10.07 6c-.957 0-1.734.746-1.734 1.667 0 .92.777 1.666 1.734 1.666.343 0 .662-.095.931-.26z"/>
  </symbol>
  <symbol id="cpu-fill" viewBox="0 0 16 16">
    <path d="M6.5 6a.5.5 0 0 0-.5.5v3a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 .5-.5v-3a.5.5 0 0 0-.5-.5h-3z"/>
    <path d="M5.5.5a.5.5 0 0 0-1 0V2A2.5 2.5 0 0 0 2 4.5H.5a.5.5 0 0 0 0 1H2v1H.5a.5.5 0 0 0 0 1H2v1H.5a.5.5 0 0 0 0 1H2v1H.5a.5.5 0 0 0 0 1H2A2.5 2.5 0 0 0 4.5 14v1.5a.5.5 0 0 0 1 0V14h1v1.5a.5.5 0 0 0 1 0V14h1v1.5a.5.5 0 0 0 1 0V14h1v1.5a.5.5 0 0 0 1 0V14a2.5 2.5 0 0 0 2.5-2.5h1.5a.5.5 0 0 0 0-1H14v-1h1.5a.5.5 0 0 0 0-1H14v-1h1.5a.5.5 0 0 0 0-1H14v-1h1.5a.5.5 0 0 0 0-1H14A2.5 2.5 0 0 0 11.5 2V.5a.5.5 0 0 0-1 0V2h-1V.5a.5.5 0 0 0-1 0V2h-1V.5a.5.5 0 0 0-1 0V2h-1V.5zm1 4.5h3A1.5 1.5 0 0 1 11 6.5v3A1.5 1.5 0 0 1 9.5 11h-3A1.5 1.5 0 0 1 5 9.5v-3A1.5 1.5 0 0 1 6.5 5z"/>
  </symbol>
  <symbol id="gear-fill" viewBox="0 0 16 16">
    <path d="M9.405 1.05c-.413-1.4-2.397-1.4-2.81 0l-.1.34a1.464 1.464 0 0 1-2.105.872l-.31-.17c-1.283-.698-2.686.705-1.987 1.987l.169.311c.446.82.023 1.841-.872 2.105l-.34.1c-1.4.413-1.4 2.397 0 2.81l.34.1a1.464 1.464 0 0 1 .872 2.105l-.17.31c-.698 1.283.705 2.686 1.987 1.987l.311-.169a1.464 1.464 0 0 1 2.105.872l.1.34c.413 1.4 2.397 1.4 2.81 0l.1-.34a1.464 1.464 0 0 1 2.105-.872l.31.17c1.283.698 2.686-.705 1.987-1.987l-.169-.311a1.464 1.464 0 0 1 .872-2.105l.34-.1c1.4-.413 1.4-2.397 0-2.81l-.34-.1a1.464 1.464 0 0 1-.872-2.105l.17-.31c.698-1.283-.705-2.686-1.987-1.987l-.311.169a1.464 1.464 0 0 1-2.105-.872l-.1-.34zM8 10.93a2.929 2.929 0 1 1 0-5.86 2.929 2.929 0 0 1 0 5.858z"/>
  </symbol>
  <symbol id="speedometer" viewBox="0 0 16 16">
    <path d="M8 2a.5.5 0 0 1 .5.5V4a.5.5 0 0 1-1 0V2.5A.5.5 0 0 1 8 2zM3.732 3.732a.5.5 0 0 1 .707 0l.915.914a.5.5 0 1 1-.708.708l-.914-.915a.5.5 0 0 1 0-.707zM2 8a.5.5 0 0 1 .5-.5h1.586a.5.5 0 0 1 0 1H2.5A.5.5 0 0 1 2 8zm9.5 0a.5.5 0 0 1 .5-.5h1.5a.5.5 0 0 1 0 1H12a.5.5 0 0 1-.5-.5zm.754-4.246a.389.389 0 0 0-.527-.02L7.547 7.31A.91.91 0 1 0 8.85 8.569l3.434-4.297a.389.389 0 0 0-.029-.518z"/>
    <path fill-rule="evenodd" d="M6.664 15.889A8 8 0 1 1 9.336.11a8 8 0 0 1-2.672 15.78zm-4.665-4.283A11.945 11.945 0 0 1 8 10c2.186 0 4.236.585 6.001 1.606a7 7 0 1 0-12.002 0z"/>
  </symbol>
  <symbol id="toggles2" viewBox="0 0 16 16">
    <path d="M9.465 10H12a2 2 0 1 1 0 4H9.465c.34-.588.535-1.271.535-2 0-.729-.195-1.412-.535-2z"/>
    <path d="M6 15a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0 1a4 4 0 1 1 0-8 4 4 0 0 1 0 8zm.535-10a3.975 3.975 0 0 1-.409-1H4a1 1 0 0 1 0-2h2.126c.091-.355.23-.69.41-1H4a2 2 0 1 0 0 4h2.535z"/>
    <path d="M14 4a4 4 0 1 1-8 0 4 4 0 0 1 8 0z"/>
  </symbol>
  <symbol id="tools" viewBox="0 0 16 16">
    <path d="M1 0L0 1l2.2 3.081a1 1 0 0 0 .815.419h.07a1 1 0 0 1 .708.293l2.675 2.675-2.617 2.654A3.003 3.003 0 0 0 0 13a3 3 0 1 0 5.878-.851l2.654-2.617.968.968-.305.914a1 1 0 0 0 .242 1.023l3.356 3.356a1 1 0 0 0 1.414 0l1.586-1.586a1 1 0 0 0 0-1.414l-3.356-3.356a1 1 0 0 0-1.023-.242L10.5 9.5l-.96-.96 2.68-2.643A3.005 3.005 0 0 0 16 3c0-.269-.035-.53-.102-.777l-2.14 2.141L12 4l-.364-1.757L13.777.102a3 3 0 0 0-3.675 3.68L7.462 6.46 4.793 3.793a1 1 0 0 1-.293-.707v-.071a1 1 0 0 0-.419-.814L1 0zm9.646 10.646a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708l-3-3a.5.5 0 0 1 0-.708zM3 11l.471.242.529.026.287.445.445.287.026.529L5 13l-.242.471-.026.529-.445.287-.287.445-.529.026L3 15l-.471-.242L2 14.732l-.287-.445L1.268 14l-.026-.529L1 13l.242-.471.026-.529.445-.287.287-.445.529-.026L3 11z"/>
  </symbol>
  <symbol id="chevron-right" viewBox="0 0 16 16">
    <path fill-rule="evenodd" d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z"/>
  </symbol>
  <symbol id="geo-fill" viewBox="0 0 16 16">
    <path fill-rule="evenodd" d="M4 4a4 4 0 1 1 4.5 3.969V13.5a.5.5 0 0 1-1 0V7.97A4 4 0 0 1 4 3.999zm2.493 8.574a.5.5 0 0 1-.411.575c-.712.118-1.28.295-1.655.493a1.319 1.319 0 0 0-.37.265.301.301 0 0 0-.057.09V14l.002.008a.147.147 0 0 0 .016.033.617.617 0 0 0 .145.15c.165.13.435.27.813.395.751.25 1.82.414 3.024.414s2.273-.163 3.024-.414c.378-.126.648-.265.813-.395a.619.619 0 0 0 .146-.15.148.148 0 0 0 .015-.033L12 14v-.004a.301.301 0 0 0-.057-.09 1.318 1.318 0 0 0-.37-.264c-.376-.198-.943-.375-1.655-.493a.5.5 0 1 1 .164-.986c.77.127 1.452.328 1.957.594C12.5 13 13 13.4 13 14c0 .426-.26.752-.544.977-.29.228-.68.413-1.116.558-.878.293-2.059.465-3.34.465-1.281 0-2.462-.172-3.34-.465-.436-.145-.826-.33-1.116-.558C3.26 14.752 3 14.426 3 14c0-.599.5-1 .961-1.243.505-.266 1.187-.467 1.957-.594a.5.5 0 0 1 .575.411z"/>
  </symbol>
</svg>

<main class="d-flex flex-nowrap">
  <h1 class="visually-hidden">Sidebars examples</h1>

  

  
  <div class="b-example-divider b-example-vr" style="width:0"></div>

  <div class="d-flex flex-column flex-shrink-0 bg-light" style="width: 4.5rem;">
    <a href="/"  class="d-block p-3 link-dark text-decoration-none" title="Icon-only" data-bs-toggle="tooltip" data-bs-placement="right">
      <img src="/img/logo.svg" style="width: 109%;">
    </a>
    <ul class="nav nav-pills nav-flush flex-column mb-auto text-center">

      <li >
        <a  id="achat"  onclick="chat(this)" onclick="clicked(this)" class="nav-link py-3 border-bottom rounded-0" aria-current="page" title="Chat" data-bs-toggle="tooltip" data-bs-placement="right">
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-chat-left" viewBox="0 0 16 16">
            <path d="M14 1a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H4.414A2 2 0 0 0 3 11.586l-2 2V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12.793a.5.5 0 0 0 .854.353l2.853-2.853A1 1 0 0 1 4.414 12H14a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"/>
          </svg>
          <!-- <svg class="bi pe-none" width="24" height="24" role="img" aria-label="Home"><use xlink:href="#home"/></svg> -->
        </a>
      </li>

      <li>
        <a  id="avideo" onclick="videoPanel(this)" onclick="clicked(this)"  class="nav-link py-3 border-bottom rounded-0" title="Video Call" data-bs-toggle="tooltip" data-bs-placement="right">
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-camera-video" viewBox="0 0 16 16">
            <path fill-rule="evenodd" d="M0 5a2 2 0 0 1 2-2h7.5a2 2 0 0 1 1.983 1.738l3.11-1.382A1 1 0 0 1 16 4.269v7.462a1 1 0 0 1-1.406.913l-3.111-1.382A2 2 0 0 1 9.5 13H2a2 2 0 0 1-2-2V5zm11.5 5.175 3.5 1.556V4.269l-3.5 1.556v4.35zM2 4a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h7.5a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1H2z"/>
          </svg>
          <!-- <svg class="bi pe-none" width="24" height="24" role="img" aria-label="Dashboard"><use xlink:href="#speedometer2"/></svg> -->
        </a>
      </li>

      <li>
        <a  id="acall" onclick="startAudioCall()" onclick="clicked(this)" class="nav-link py-3 border-bottom rounded-0" title="Call" data-bs-toggle="tooltip" data-bs-placement="right">
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-telephone-forward" viewBox="0 0 16 16">
            <path d="M3.654 1.328a.678.678 0 0 0-1.015-.063L1.605 2.3c-.483.484-.661 1.169-.45 1.77a17.568 17.568 0 0 0 4.168 6.608 17.569 17.569 0 0 0 6.608 4.168c.601.211 1.286.033 1.77-.45l1.034-1.034a.678.678 0 0 0-.063-1.015l-2.307-1.794a.678.678 0 0 0-.58-.122l-2.19.547a1.745 1.745 0 0 1-1.657-.459L5.482 8.062a1.745 1.745 0 0 1-.46-1.657l.548-2.19a.678.678 0 0 0-.122-.58L3.654 1.328zM1.884.511a1.745 1.745 0 0 1 2.612.163L6.29 2.98c.329.423.445.974.315 1.494l-.547 2.19a.678.678 0 0 0 .178.643l2.457 2.457a.678.678 0 0 0 .644.178l2.189-.547a1.745 1.745 0 0 1 1.494.315l2.306 1.794c.829.645.905 1.87.163 2.611l-1.034 1.034c-.74.74-1.846 1.065-2.877.702a18.634 18.634 0 0 1-7.01-4.42 18.634 18.634 0 0 1-4.42-7.009c-.362-1.03-.037-2.137.703-2.877L1.885.511zm10.762.135a.5.5 0 0 1 .708 0l2.5 2.5a.5.5 0 0 1 0 .708l-2.5 2.5a.5.5 0 0 1-.708-.708L14.293 4H9.5a.5.5 0 0 1 0-1h4.793l-1.647-1.646a.5.5 0 0 1 0-.708z"/>
          </svg>
          <!-- <svg class="bi pe-none" width="24" height="24" role="img" aria-label="Orders"><use xlink:href="#table"/></svg> -->
        </a>
      </li>

      <li>
        <a  id="astream" onclick="streamPanel(this)" onclick="clicked(this)" class="nav-link py-3 border-bottom rounded-0" title="Stream" data-bs-toggle="tooltip" data-bs-placement="right">
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-broadcast" viewBox="0 0 16 16">
            <path d="M3.05 3.05a7 7 0 0 0 0 9.9.5.5 0 0 1-.707.707 8 8 0 0 1 0-11.314.5.5 0 0 1 .707.707zm2.122 2.122a4 4 0 0 0 0 5.656.5.5 0 1 1-.708.708 5 5 0 0 1 0-7.072.5.5 0 0 1 .708.708zm5.656-.708a.5.5 0 0 1 .708 0 5 5 0 0 1 0 7.072.5.5 0 1 1-.708-.708 4 4 0 0 0 0-5.656.5.5 0 0 1 0-.708zm2.122-2.12a.5.5 0 0 1 .707 0 8 8 0 0 1 0 11.313.5.5 0 0 1-.707-.707 7 7 0 0 0 0-9.9.5.5 0 0 1 0-.707zM10 8a2 2 0 1 1-4 0 2 2 0 0 1 4 0z"/>
          </svg>
          <!-- <svg class="bi pe-none" width="24" height="24" role="img" aria-label="Products"><use xlink:href="#grid"/></svg> -->
        </a>
      </li>


      <li>
        <a  id="afile" onclick="sharePanel(this)" onclick="clicked(this)" class="nav-link py-3 border-bottom rounded-0" title="File Share" data-bs-toggle="tooltip" data-bs-placement="right">
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-folder-symlink" viewBox="0 0 16 16">
            <path d="m11.798 8.271-3.182 1.97c-.27.166-.616-.036-.616-.372V9.1s-2.571-.3-4 2.4c.571-4.8 3.143-4.8 4-4.8v-.769c0-.336.346-.538.616-.371l3.182 1.969c.27.166.27.576 0 .742z"/>
            <path d="m.5 3 .04.87a1.99 1.99 0 0 0-.342 1.311l.637 7A2 2 0 0 0 2.826 14h10.348a2 2 0 0 0 1.991-1.819l.637-7A2 2 0 0 0 13.81 3H9.828a2 2 0 0 1-1.414-.586l-.828-.828A2 2 0 0 0 6.172 1H2.5a2 2 0 0 0-2 2zm.694 2.09A1 1 0 0 1 2.19 4h11.62a1 1 0 0 1 .996 1.09l-.636 7a1 1 0 0 1-.996.91H2.826a1 1 0 0 1-.995-.91l-.637-7zM6.172 2a1 1 0 0 1 .707.293L7.586 3H2.19c-.24 0-.47.042-.683.12L1.5 2.98a1 1 0 0 1 1-.98h3.672z"/>
          </svg>
          <!-- <svg class="bi pe-none" width="24" height="24" role="img" aria-label="Customers"><use xlink:href="#people-circle"/></svg> -->
        </a>
      </li>

      <li>
        <a  onclick="gamePanel(this)" onclick="clicked(this)"  id="agames" class="nav-link py-3 border-bottom rounded-0" title="Games" data-bs-toggle="tooltip" data-bs-placement="right">
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-controller" viewBox="0 0 16 16">
            <path d="M11.5 6.027a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0zm-1.5 1.5a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1zm2.5-.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0zm-1.5 1.5a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1zm-6.5-3h1v1h1v1h-1v1h-1v-1h-1v-1h1v-1z"/>
            <path d="M3.051 3.26a.5.5 0 0 1 .354-.613l1.932-.518a.5.5 0 0 1 .62.39c.655-.079 1.35-.117 2.043-.117.72 0 1.443.041 2.12.126a.5.5 0 0 1 .622-.399l1.932.518a.5.5 0 0 1 .306.729c.14.09.266.19.373.297.408.408.78 1.05 1.095 1.772.32.733.599 1.591.805 2.466.206.875.34 1.78.364 2.606.024.816-.059 1.602-.328 2.21a1.42 1.42 0 0 1-1.445.83c-.636-.067-1.115-.394-1.513-.773-.245-.232-.496-.526-.739-.808-.126-.148-.25-.292-.368-.423-.728-.804-1.597-1.527-3.224-1.527-1.627 0-2.496.723-3.224 1.527-.119.131-.242.275-.368.423-.243.282-.494.575-.739.808-.398.38-.877.706-1.513.773a1.42 1.42 0 0 1-1.445-.83c-.27-.608-.352-1.395-.329-2.21.024-.826.16-1.73.365-2.606.206-.875.486-1.733.805-2.466.315-.722.687-1.364 1.094-1.772a2.34 2.34 0 0 1 .433-.335.504.504 0 0 1-.028-.079zm2.036.412c-.877.185-1.469.443-1.733.708-.276.276-.587.783-.885 1.465a13.748 13.748 0 0 0-.748 2.295 12.351 12.351 0 0 0-.339 2.406c-.022.755.062 1.368.243 1.776a.42.42 0 0 0 .426.24c.327-.034.61-.199.929-.502.212-.202.4-.423.615-.674.133-.156.276-.323.44-.504C4.861 9.969 5.978 9.027 8 9.027s3.139.942 3.965 1.855c.164.181.307.348.44.504.214.251.403.472.615.674.318.303.601.468.929.503a.42.42 0 0 0 .426-.241c.18-.408.265-1.02.243-1.776a12.354 12.354 0 0 0-.339-2.406 13.753 13.753 0 0 0-.748-2.295c-.298-.682-.61-1.19-.885-1.465-.264-.265-.856-.523-1.733-.708-.85-.179-1.877-.27-2.913-.27-1.036 0-2.063.091-2.913.27z"/>
          </svg>
        </a>
      </li>

    </ul>
    <div id="callControl" class="border-top" >
      <a onclick="endAudioCall()" class="" title="Hang Up" data-bs-toggle="tooltip" data-bs-placement="right" style="color:red;"> 
        <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" fill="currentColor" class="bi bi-telephone-fill" viewBox="0 0 16 16">
          <path fill-rule="evenodd" d="M1.885.511a1.745 1.745 0 0 1 2.61.163L6.29 2.98c.329.423.445.974.315 1.494l-.547 2.19a.678.678 0 0 0 .178.643l2.457 2.457a.678.678 0 0 0 .644.178l2.189-.547a1.745 1.745 0 0 1 1.494.315l2.306 1.794c.829.645.905 1.87.163 2.611l-1.034 1.034c-.74.74-1.846 1.065-2.877.702a18.634 18.634 0 0 1-7.01-4.42 18.634 18.634 0 0 1-4.42-7.009c-.362-1.03-.037-2.137.703-2.877L1.885.511z"/>
        </svg>
      </a>
      <label id="callTiming"></label>
      <div id="volumeRange" style="display: flex;flex-direction: row;flex-wrap: nowrap;align-content: center;justify-content: center;align-items: center;" onmouseover="showRange()" onmouseleave="hideRange()">
        <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="currentColor" class="bi bi-volume-up-fill" viewBox="0 0 16 16" id="callVolume">
          <path d="M11.536 14.01A8.473 8.473 0 0 0 14.026 8a8.473 8.473 0 0 0-2.49-6.01l-.708.707A7.476 7.476 0 0 1 13.025 8c0 2.071-.84 3.946-2.197 5.303l.708.707z"/>
          <path d="M10.121 12.596A6.48 6.48 0 0 0 12.025 8a6.48 6.48 0 0 0-1.904-4.596l-.707.707A5.483 5.483 0 0 1 11.025 8a5.483 5.483 0 0 1-1.61 3.89l.706.706z"/>
          <path d="M8.707 11.182A4.486 4.486 0 0 0 10.025 8a4.486 4.486 0 0 0-1.318-3.182L8 5.525A3.489 3.489 0 0 1 9.025 8 3.49 3.49 0 0 1 8 10.475l.707.707zM6.717 3.55A.5.5 0 0 1 7 4v8a.5.5 0 0 1-.812.39L3.825 10.5H1.5A.5.5 0 0 1 1 10V6a.5.5 0 0 1 .5-.5h2.325l2.363-1.89a.5.5 0 0 1 .529-.06z"/>
        </svg>
        <input onchange="setVolume(this.valueAsNumber)" id="callRange" type="range" class="form-range" min="0" max="5"  style="display: none;" >
      </div>


    </div>
    <div class="dropdown border-top">
      <a href="" class="d-flex align-items-center justify-content-center  link-dark text-decoration-none dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false" style="padding: 1.2rem 6px 1.2rem 6px;">
        <div class="image-stack">
          <div class="image-stack__item image-stack__item--bottom">
            <img id="btm-img" src="/img/users/<%= user.photo %>" alt="" width="24" height="24" class="rounded-circle">
          </div>
          <div class="image-stack__item  image-stack__item--top">
            <img id="top-img" src="/img/users/<%= user.photo %>" alt="" width="24" height="24" class="rounded-circle">
          </div>
        </div>
        <!-- <img src="/img/users/<%= user.photo %>" alt="" width="24" height="24" class="rounded-circle"> -->
      </a>
      <ul class="dropdown-menu text-small shadow">
        <li><a class="dropdown-item" href="#">Details</a></li>
        <li><a class="dropdown-item" href="">Settings</a></li>
        <!-- <li><a class="dropdown-item" href="#">Profile</a></li> -->
        <li><hr class="dropdown-divider"></li>
        <li><a id="disCnt" class="dropdown-item" href="#">Disconnect</a></li>
      </ul>
    </div>
  </div>

   
  <div class="b-example-divider b-example-vr" style="width:0"></div>

  <div id="workspace">

    <!-- CHAT BLOCK -->
    <div  id="chatPage">
      <div id="chat" >
        
           
           

      </div>
      <div id="typingBox">
        <input type="text" id="typing" placeholder="Enter your messsage" style="width: 90%;border-radius: 30px;border: 0;box-shadow: 0px 0px 3px;font-family: system-ui;padding-left: 3%;font-size: 100%;padding-right: 3%;">
        <button id = "sendBtn" onclick="send()" style=" margin-left: 0.5%;width: 10%;font-family: system-ui;border-radius: 30px;font-weight: bold;border: 0;box-shadow: 0px 0px 2px; background-color: blue;color: white;">
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-send-fill" viewBox="0 0 16 16">
            <path d="M15.964.686a.5.5 0 0 0-.65-.65L.767 5.855H.766l-.452.18a.5.5 0 0 0-.082.887l.41.26.001.002 4.995 3.178 3.178 4.995.002.002.26.41a.5.5 0 0 0 .886-.083l6-15Zm-1.833 1.89L6.637 10.07l-.215-.338a.5.5 0 0 0-.154-.154l-.338-.215 7.494-7.494 1.178-.471-.47 1.178Z"/>
          </svg>
        </button>
      </div>

    </div>
    
    <!-- CHAT BLOCK END-->

    <!-- STREAM BLOCK -->
    
      <div id="stream_parent_caller">
        
        <div style="width: 90%;height: 65%; display: flex;flex-direction: column;flex-wrap: nowrap;align-content: center;justify-content: center;align-items: center;">
            <p id="streamLabel" style="text-align: center;overflow-wrap: break-word;font-weight: BOLD;font-family: system-ui;font-size: 172%;"> Currently you are not streaming anything</p>
        </div>
        <button id="startStreamBtn" onclick="stream()" style="width: inherit;height: 14%;border-radius: 10px;background-color: aliceblue;    width: inherit;font-family: system-ui;border: 0;box-shadow: 0px 0px 2px 0px;"><B>Stream</B></button>
        <button id="stopStreamBtn" onclick="stopStream()" style="display:none; width: inherit;height: 14%;border-radius: 10px;background-color: aliceblue;    width: inherit;font-family: system-ui;border: 0;box-shadow: 0px 0px 2px 0px;"><B>Stop Stream</B></button>
      </div>
      <div id="stream_parent_receiver">
        <video id="player" ></video>
        <button id="endStreamBtn" onclick="endStreamCall()" ><B>End Stream</B></button>

      </div>
    
    
    <!-- STREAM BLOCK END-->

    <!-- SHARE BLOCK-->
    <div id="share_parent">
        <!-- <label for="fileI">Choose a file to share:</label> -->
        <div style="display: flex;flex-direction: column;flex-wrap: nowrap;justify-content: center;align-items: stretch;width: 100%;height: 100%;">
          <div style="border:solid; border-radius:10px; height: 80%; display: flex;flex-direction: row;flex-wrap: nowrap;align-content: center;justify-content: center;align-items: center;">
            <div style="border: dotted;width: 96%;height: 96%;border-radius: 10px; display: flex;flex-direction: column;flex-wrap: nowrap;align-content: center;justify-content: center;align-items: center; background-color: #f4fcff;;">
              <img src="/img/folder.png" style="height: 25%;">
              <p style="text-align: center;">Drag and Drop your file here</p>
            </div>
          </div>
          <input type="file" id="fileI" name="fileI" onchange="sendFile()" style="margin-block: 4%;">
        </div>
        
    </div>
    <div id="sharePanel">
        
      <div style="width: 90%;height: 65%; display: flex;flex-direction: column;flex-wrap: nowrap;align-content: center;justify-content: center;align-items: center;">
          <p style="text-align: center;overflow-wrap: break-word;font-weight: BOLD;font-family: system-ui;font-size: 172%;">Request to your peer to share a file</p>
      </div>
      <button onclick="share()" style="width: inherit;height: 14%;border-radius: 10px;background-color: aliceblue;    width: inherit;font-family: system-ui;border: 0;box-shadow: 0px 0px 2px 0px;"><B>Request</B></button>
    </div>

    <!-- SHARE BLOCK END -->

    <!-- VIDEO CALL BLOCK -->
    <div id="live">
      <div style="width: 100%; height:100%">
        <video id="remote-video" ></video>
        <video id="local-video" muted="true"></video>
        <button id="end-call" onclick="endCall()">End Call</button>
      </div>
    </div>
    <div id="videoPanel">
        
      <div style="width: 90%;height: 65%; display: flex;flex-direction: column;flex-wrap: nowrap;align-content: center;justify-content: center;align-items: center;">
          <p style="text-align: center;overflow-wrap: break-word;font-weight: BOLD;font-family: system-ui;font-size: 172%;"> Request a video call</p>
      </div>
      <button onclick="callUser()" style="width: inherit;height: 14%;border-radius: 10px;background-color: aliceblue;    width: inherit;font-family: system-ui;border: 0;box-shadow: 0px 0px 2px 0px;"><B>Request a call</B></button>
    </div>
    <!-- VIDEO CALL BLOCK END-->

    <!-- AUDIO CALL BLOCK -->
    <div id="audio_parent">
        <audio onsuspend="endAudioCall()" onpause="endAudioCall()" id="audioPlayer"></audio>
        <!-- <button id="hangup" onclick="endAudioCall()">Hang Up</button> -->
    </div>
    <!-- AUDIO CALL BLOCK END -->

    <!-- GAME DIV  -->
    <div id="gameConsole">
      <div style="display: flex;flex-direction: column-reverse;flex-wrap: nowrap;justify-content: center;align-items: stretch;">
        <button id="exitBtn" onclick="exitTic()">Exit</button>
        <button id="resetBtn" onclick="reset('btn')">Reset</button>
        <div id="game_board">
            <div id="row">
                <div class="square"><p id="squareContent"></p></div>
                <div class="square"><p id="squareContent"></p></div>
                <div class="square"><p id="squareContent"></p></div>
            </div>
            <div id="row">
                <div class="square"><p id="squareContent"></p></div>
                <div class="square"><p id="squareContent"></p></div>
                <div class="square"><p id="squareContent"></p></div>
            </div>
            <div id="row">
                <div class="square"><p id="squareContent"></p></div>
                <div class="square"><p id="squareContent"></p></div>
                <div class="square"><p id="squareContent"></p></div>
            </div>      
        </div>
      </div>
        
        <div id="scoreBoard">
            <p id="turn">Now it is yours turn</p>
            <p id="winner">Congrats!! You are the winner</p>
        </div>
    </div>
    <div id="gamePanel">
        
      <div style="width: 90%;height: 65%; display: flex;flex-direction: column;flex-wrap: nowrap;align-content: center;justify-content: center;align-items: center;">
          <p style="text-align: center;overflow-wrap: break-word;font-weight: BOLD;font-family: system-ui;font-size: 172%;"> TIC-TAC-TOE</p>
      </div>
      <button onclick="tictactoe()" style="width: inherit;height: 14%;border-radius: 10px;background-color: aliceblue;    width: inherit;font-family: system-ui;border: 0;box-shadow: 0px 0px 2px 0px;"><B>Request to play</B></button>
    </div>
    
    <!-- GAME DIV END -->
  </div>
  <msglist></msglist>
  <div id="wrksDataStore" data-peerid="<%= user.peerId %>" data-recpeerid="<%= con.receiverPeerId %>" data-calpeerid="<%= con.callerPeerId %>" data-connid="<%= con._id %>"></div>
</main>


    <!-- <script src="/docs/5.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-OERcA2EqjJCMA+/3y+gxIOqMEjwtxJY7qPCqsdltbNJuaOe923+mo//f6V8Qbsw3" crossorigin="anonymous"></script> -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-OERcA2EqjJCMA+/3y+gxIOqMEjwtxJY7qPCqsdltbNJuaOe923+mo//f6V8Qbsw3" crossorigin="anonymous"></script>
    <script src="/js/sidebars.js"></script>
    
    

      <script>
        function showRange(){
          const ele = document.getElementById('callRange')
          const icon = document.getElementById('callVolume')
          ele.style.display = 'block'
          icon.style.display = 'none'
        }
        function hideRange(){
          const ele = document.getElementById('callRange')
          const icon = document.getElementById('callVolume')
          ele.style.display = 'none'
          icon.style.display = 'block'
        }

        function clicked(e) {
          const l = document.getElementsByClassName('nav-link')
          for(var i = 0; i < l.length ; i++){
            l[i].style.backgroundColor = '#f8f9fa'
          }
          e.style.backgroundColor = '#dee2e6'
        }
        // function (e) {
          
        //   e.style.backgroundColor = '#ced4da'
        // }
        

        function hideEveryThing() {
          document.getElementById('chatPage').style.display = 'none'
          document.getElementById('stream_parent_caller').style.display = 'none'
          document.getElementById('stream_parent_receiver').style.display = 'none'
          document.getElementById('share_parent').style.display = 'none'
          document.getElementById('live').style.display = 'none'
          document.getElementById('audio_parent').style.display = 'none'
          document.getElementById('gameConsole').style.display = 'none'
          document.getElementById('sharePanel').style.display = 'none'
          document.getElementById('videoPanel').style.display = 'none'
          document.getElementById('gamePanel').style.display = 'none'

           

        }

      </script>

      

    <script>
            
            //GLOBAL VARIABLE
            var fixedFileChannel= undefined, fixedTicChannel= undefined
            var DataConnection = undefined, fileConnection=false, ticConnection = undefined
            var currentCall = undefined, streamCall= undefined, audioCall= undefined
            var fileChunks = []; var _turn;
             
            var charcter = undefined
            const wrksDataStore = document.getElementById('wrksDataStore')
            var yourPeerId = wrksDataStore.dataset.peerid
            var peerId = wrksDataStore.dataset.recpeerid

            if( peerId === yourPeerId){
              charcter = 'receiver'
              peerId = wrksDataStore.dataset.calpeerid
            }else{
              charcter = 'sender'
            }
            const peer = new Peer(yourPeerId);

            peer.on("open", function (id) {
                console.log('connected', id,' ',charcter,' ', peerId)
            }); 

            //====================================
            peer.on('connection', (dataCon)=> {
                
                console.log(dataCon)
                if(dataCon.metadata && dataCon.metadata.isFile){
                        
                        if(charcter === 'sender'){
                            console.log('you are sender and you shouldnt be here')
                            return
                        }
                          
                        const parent = document.getElementById('share_parent')
                        
                        fixedFileChannel = dataCon
                        setFileHandler()
                        
                }
                else if(dataCon.metadata && dataCon.metadata.isTic){
                    if(confirm('HE/SHE wants to play TIC-TAC-TOE')){
                        ticConnection = dataCon
                        // const gameConsole = document.getElementById('gameConsole')
                        const turn = document.getElementById('turn')
                        const winner = document.getElementById('winner')
                        gamePanel()

                        _turn = 1;
                        turn.innerHTML = 'NOW TURN IS HE/SHE'

                        // gameConsole.style.display = 'flex'
                        GAME_OVER = false

                        const sqrs = document.getElementsByClassName('square')
                        // console.log( sqrs)
                        
                        for(var i = 0 ; i < sqrs.length ; i++){
                            sqrs[i].setAttribute('id', i)
                            const id = sqrs[i].id
                            if(1|| sqrs[i].onclick === null){
                                sqrs[i].onclick = (e)=>{
                                    if(GAME_OVER){
                                        alert('GAME OVER!!')
                                        return
                                    }
                                    if(_turn !== 0){
                                        alert('ITS NOT YOUR TURN MAN!! PLEASE WAIT')
                                        return
                                    }
                                    if( !mark(id,'O') ){
                                        alert('PLEASE MARK A UNMARKED SQUARE.')
                                        return
                                    }
                                    
                                    if( isWinner('O') === 'O'){
                                        dataCon.send( id)
                                        GAME_OVER = true
                                        winner.innerHTML = "YOU WIN 🎊🎉🎊"
                                        setTimeout(()=>{
                                            dataCon.send('GO')
                                        },1000)
                                        
                                        return
                                    }  
                                    _turn = 1
                                    e.preventDefault()
                                    turn.innerHTML = "NOW TURN IS HE/SHE"
                                    // mark(id,'O')
                                    dataCon.send( id)
                                }
                            }
                            // console.log(sqrs[i])

                        }
                        dataCon.on('data', data=>{
                            if(data === 'exit'){
                                console.log('exit calledd')
                                ticConnection = undefined
                                reset('notbtn')
                                dataCon.close()
                                document.getElementById('gamePanel').style.display = 'flex'
                                document.getElementById('gameConsole').style.display = 'none'
                                return
                            }
                            if( data == 'reset'){
                                reset('notbtn')
                                return;
                            }
                            if(data === 'GO'){
                                winner.innerHTML="YOU LOOSE ❤️"
                                GAME_OVER = true
                                return
                            }
                            mark(data,'X')
                            _turn = 0
                            turn.innerHTML = "NOW TURN IS YOUR"
                            
                        })
                        
                    }else{
                        console.log('game rejected')
                        setTimeout(() => {
                            dataCon.send('rejected')
                        }, 1000);
                        
                        // dataCon.close()
                    }
                }
                else if(dataCon.metadata && dataCon.metadata.isChat){
                    
                    DataConnection = dataCon
                    DataConnection.on('data',(data)=>{
                        console.log(data)
                        appendmsg(data,'HE/SHE:')
                    })
                    //MIGHT CLOSE dataConn later
                }
                else{
                    
                }
                
            })
            //====================================

            //====================================
            peer.on("call",async (call) => {
                console.log(call)
                
                if( call.metadata && call.metadata.isStreaming){
                    
                    if( confirm('HE/SHE want to stream something special?')){
                        call.answer()
                        streamCall = call
                        // const parent = document.getElementById('stream_parent_receiver')
                        // parent.style.display = 'block'
                        streamPanel()
                        const player = document.getElementById('player')
                        console.log(call)
                        // currentCall = call
                        // call.answer()
                        call.on('stream' , (screenStream)=>{
                            console.log(screenStream)
                            player.srcObject = screenStream
                            player.play()
                        })
                        call.on('close', ()=>{
                          console.log('streaming stopped')
                          player.srcObject = null
                          player.pause()
                        })
                    }else{
                        call.close()
                    }
                }
                else if(call.metadata && call.metadata.isAudio){
                    // call.answer()
                    if(confirm('Accept call from ${call.peer}?')){
                        
                        navigator.mediaDevices.getUserMedia({video:false, audio:true})
                                 .then( stream=>{
                                    const parent = document.getElementById('callControl')
                                    const player = document.getElementById('audioPlayer')
                                    parent.style.display = 'flex'
                                    console.log(call)
                                    audioCall = call
                                    call.answer(stream)
                                    call.on('stream', ( audioStream)=> {
                                        player.srcObject = audioStream
                                        player.play()
                                    })
                                    call.on('close', ()=>{
                                        console.log('receiver closed called')
                                        audioCall= undefined
                                        endAudioCall()
                                    })
                                 }).catch( err=>{
                                    console.log( 'Error in getting user media stream')
                                 })
                    }else{
                        call.close()
                    }
                }
                else{
                    // call.answer()
                    if (confirm(`Accept call from ${call.peer}?`)) {
                        // grab the camera and mic
                        var stream
                        try{
                          stream = await navigator.mediaDevices
                                                .getUserMedia({ video: true, audio: true })
                        }catch( err ){
                          alert('cannot get local stream')
                          console.log( err)
                          // return
                        }
                        // answer the call
                        call.answer(stream);
                        currentCall = call;
                        // change to the video view
                        // document.querySelector("#menu").style.display = "none";
                        // document.querySelector("#live").style.display = "block";

                        // play the local preview
                        videoPanel()
                        document.querySelector("#local-video").srcObject = stream;
                        document.querySelector("#local-video").play();

                                        
                                        
                        call.on("stream", (remoteStream) => {
                          // when we receive the remote stream, play it
                          document.getElementById("remote-video").srcObject = remoteStream;
                          document.getElementById("remote-video").play();
                        });
                        call.on('close', ()=>{
                            stopCapture(stream)
                        })
                                    
                                    
                    } 
                    else{
                        // user rejected the call, close it
                        call.close();
                    }
                }
                
            });
            //====================================
            function connect() {
              DataConnection= peer.connect(peerId, {metadata:{isChat:true}})
              fixedFileChannel = peer.connect(peerId, {metadata:{isFile: true}})
              
              setFileHandler()
              DataConnection.on('data',(data)=>{
                console.log(data)
                appendmsg(data,'HE/SHE:')
              })
            }
            
            setTimeout(()=>{
              if(charcter === 'sender'){
                connect()
              }
                
            },5000)

            
            


        //VIDEO CALL   
        function videoPanel(e) {
          hideEveryThing()
          if( e === undefined){
            document.getElementById('avideo').style.backgroundColor = '#dee2e6'
          }
          else{
            clicked(e)
          }
          
          if(currentCall === undefined){
            document.getElementById('videoPanel').style.display = 'flex'
            
          }else{
            document.getElementById("live").style.display = "flex";
          }
        }
      async function callUser() {
                
                //VIDEO CALL
                

                    var stream
                    try{
                            stream = await navigator.mediaDevices.getUserMedia({
                            video: true,
                            audio: true,
                        });
                    }catch( err){
                        alert('cannot get local stream')
                        console.log( err)
                        // return
                    }
                    
                
                    document.getElementById("videoPanel").style.display = "none";
                    document.getElementById("live").style.display = "flex";
                    document.getElementById("local-video").srcObject = stream;
                    document.getElementById("local-video").play();
                
                    currentCall = peer.call(peerId, stream);

                    currentCall.on("stream", (stream) => {
                        document.getElementById("remote-video").srcObject = stream;
                        document.getElementById("remote-video").play();
                    });

                    currentCall.on("data", (stream) => {
                        document.querySelector("#remote-video").srcObject = stream;
                    });

                    currentCall.on("error", (err) => {
                        console.log(err);
                    });

                    currentCall.on('close', () => {
                        stopCapture(stream)
                    })

                
                    
                
      }

          function endCall() {
                hideEveryThing()
                document.getElementById('videoPanel').style.display = 'flex'
                
                if (currentCall === undefined) 
                    return;
                
                currentCall.close();
                
                currentCall = undefined;
            }



          //CHAT
            const parent = document.getElementById('chat')
            function appendmsg(data, sender){
                
                
                const msgDiv = document.createElement('div')
                msgDiv.setAttribute('id', 'msg')
                
                const msgP = document.createElement('p')
                // msgP.style.color = 'black'
                const textNode = document.createTextNode(data)
                msgP.appendChild(textNode)
                msgDiv.appendChild(msgP)
                
                const msgBlock = document.createElement('div')
                msgBlock.setAttribute('id', 'msgBlock')
                msgBlock.style.justifyContent = sender === 'YOU:' ? 'flex-end' : 'flex-start'
                msgBlock.appendChild(msgDiv)
                
                parent.appendChild(msgBlock)

            }
            
            //CHAT
            function chat(e){
                if(DataConnection){
                    clicked(e)
                    hideEveryThing()

                    document.getElementById('chatPage').style.display = 'flex'
                    
                }
                else{
                  console.log( 'you donot have any data channels.')
                }
            }
            function sendMsg(con){
                // document.getElementById('chat').style.display = 'block'
                const msg = document.getElementById('typing').value
                if(msg === "")
                  return;
                document.getElementById('typing').value = null
                appendmsg(msg,'YOU:')
                con.send(msg)
            }
            function send(){
                sendMsg(DataConnection)
            }

        //SHARE
        function sharePanel(e) {
          hideEveryThing()
          clicked(e)
          if(fileConnection){
            document.getElementById('share_parent').style.display = 'flex'
          }else{
            document.getElementById('sharePanel').style.display = 'flex'
          }

        }
        function setFileHandler() {
                const parent = document.getElementById('share_parent')
                fileChunks = [];
                let mime,total_chunks,cum_chunks =0
                fixedFileChannel.on('data',data=>{
                        // if(charcter === 'receiver')
                        //     return;
                        console.log(data)
                        if(data === 'no'){
                            fileConnection = false
                            alert('HE/SHE denied. Please donot send any file. Or request once more')
                            parent.style.display = 'none'
                            return;
                        }
                        else if(data === 'yes'){
                            fileConnection = true
                            alert('you are all ready to share a file')
                            parent.style.display = 'block'
                            document.getElementById('sharePanel').style.display = 'none'

                            return;
                        }
                        else if( data === 'purpose'){
                            if(confirm('HE/SHE want to send a file?')){
                                    fixedFileChannel.send('yes')
                                     fileConnection = true
                                    return
                                }
                                else{
                                    fileConnection = false
                                    fixedFileChannel.send('no')
                                    // dataCon.close()
                                    return
                                }
                        }
                        else if(typeof data == "object" && data.type === "ADV"){
                          mime = data.mime
                          total_chunks = data.size
                          cum_chunks = 0
                        }
                        else if( data === "SEND_EOF"){
                          fixedFileChannel.send("EOF");
                          document.getElementById('sharePanel').style.display = 'flex'
                          document.getElementById('share_parent').style.display = 'none'



                          console.log( 'EOF sent')
                        }
                        else{
                            if(fileConnection){
                                
                                if (data.toString() === "EOF") {
                                    // Once, all the chunks are received, combine them to form a Blob
                                    console.log(fileChunks)
                                    const file = new Blob(fileChunks, {type:mime});
                                    console.log(file)
                                    const fileSrc = URL.createObjectURL(file)
                                    console.log(fileSrc)
                                    const fileName = 'DoorDarshan'+Date.now();
                                
                                    const a = document.createElement('a')
                                    a.setAttribute('download', fileName)
                                    a.setAttribute('href', fileSrc)
                                    document.body.appendChild(a)
                                    a.click()
                                    document.body.removeChild(a)
                                    URL.revokeObjectURL(fileSrc);
                                    fileChunks = []
                                    fileConnection = false;
                                    cum_chunks = 0
                                    
                                } else {
                                    // Keep appending various file chunks
                                    fileChunks.push(data);
                                    cum_chunks++;
                                    console.log(cum_chunks, total_chunks)
                                    if(cum_chunks == total_chunks){
                                      // send FNS signal
                                      fixedFileChannel.send('SEND_EOF')

                                    }
                                }
                            }
                            else{
                                alert('Permission denied already.')
                                return
                            }
                            
                        }
                                

                            // }
                    })
            }
            function share(){

                if(fixedFileChannel){

                    // const parent = document.getElementById('share_parent')

                    // setTimeout(()=>{
                        fixedFileChannel.send('purpose')
                    // },1000)
                    
                    setTimeout(()=>{},1000)
                }
                else{
                  console.log('you dont have any file channels')
                }
                
            }

            
            async function sendFile(){
                if( fileConnection === false){
                    alert('You are not yet ready to send file.')
                    return
                }
                fileConnection = false
                const fileI = document.getElementById('fileI')
                const chunkSize = 1024 * 1024;
                const file = fileI.files[0]
                console.log("File Desc:\n",file)

                let zip = new JSZip()
                zip.file(file.name, file)
                
                const compressed_file = await zip.generateAsync({
                                    type: "blob",
                                    compression: "DEFLATE",
                                    compressionOptions: {
                                        level: 9
                                    }
                                  })


                console.log("Compressed File Desc:\n",compressed_file)

                let mime = "application/zip"
                let expected_chunks = Math.ceil((compressed_file.size)/(chunkSize)) 

                // sending ADV chunck since it is SCTP
                fixedFileChannel.send({
                                        type:"ADV", 
                                         mime, 
                                        size:expected_chunks
                                      })


                let buffer = await compressed_file.arrayBuffer();
                console.log("Printing Buffer\n",buffer)
                
                var flag = true
                console.log("File Buffer Length in byte- ", buffer.byteLength)
                console.log("Start sending buffer chunck wise")
                while (buffer.byteLength ) {
                    const chunk = buffer.slice(0, chunkSize);
                    console.log(chunk)
                    buffer = buffer.slice(chunkSize, buffer.byteLength);
                    fixedFileChannel.send(chunk);
                    flag = false
                }
            }



            //TIC-TAC-TOE
            function gamePanel(e) {
              hideEveryThing()
              if(e === undefined)
                document.getElementById('agames').style.backgroundColor = '#dee2e6'
              else
                clicked(e)
              if(ticConnection === undefined){
                document.getElementById('gamePanel').style.display = 'flex'
              }
              else{
                document.getElementById('gameConsole').style.display = 'flex'
              }
              


            }
            let GAME_OVER;
            
            function reset(mode) {
                const sqrs = document.getElementsByClassName('square')
                for(let i=0;i<9;i++){
                    sqrs[i].firstChild.innerHTML = ""
                }
                GAME_OVER = false
                const winner = document.getElementById('winner')
                winner.innerHTML = ""
                const turn = document.getElementById('turn')
                turn.innerHTML= mode === "btn"? "NOW TURN IS YOURS" : "NOW TURN IS HE/SHE"
                _turn = mode === "btn"? 0 : 1
                if(ticConnection !== undefined && mode === 'btn'){
                    ticConnection.send('reset')
                }

            }
            function mark( id, sign){
                console.log('mark', id)
                const e=document.getElementById(id)
                if(e.firstChild.innerHTML === "")
                    e.firstChild.innerHTML = sign
                else
                    return false
                return true
            }
            
            function tictactoe(){
                if(ticConnection !== undefined){
                    alert('you already have a ticConnection')
                    return
                }

                
                let dataConn = peer.connect(peerId , {metadata:{isTic:true}})
                ticConnection = dataConn
                const gameConsole = document.getElementById('gameConsole')
                const turn = document.getElementById('turn')
                const winner = document.getElementById('winner')
                reset('btn')
                turn.innerHTML= "NOW TURN IS YOURS"
                gameConsole.style.display = 'flex'
                document.getElementById('gamePanel').style.display = 'none'
                const sqrs = document.getElementsByClassName('square')
                // console.log( sqrs)
                GAME_OVER = false
                for(var i = 0 ; i < sqrs.length ; i++){
                    sqrs[i].setAttribute('id', i)
                    const id = sqrs[i].id
                    // console.log( sqrs[i].onclick)
                    if( sqrs[i].onclick === null){
                        sqrs[i].onclick =  (e)=>{
                            e.preventDefault()
                            if(ticConnection === undefined){
                                alert( 'HE/SHE refused, you cannot play.')
                                return
                            }
                            if(GAME_OVER){
                                alert('GAME OVER!!')
                                return
                            }
                            if(_turn !== 0){
                                alert('IT IS NOT YOUR TURN MAN!! PLEASE WAIT.')
                                return
                            }
                            if( !mark(id,'X') ){
                                alert('PLEASE MARK A UNMARKED SQUARE.')
                                return
                            }
                            
                            if( isWinner('X') === 'X'){
                                ticConnection.send(id)
                                GAME_OVER = true
                                winner.innerHTML = "YOU WIN 🎊🎉🎊"
                                setTimeout(() => {
                                    ticConnection.send('GO')
                                }, 1000);
                                return;
                            }
                            _turn = 1
                            turn.innerHTML= "NOW TURN IS HE/SHE"
                            // mark(id,'X')
                            ticConnection.send( id)
                        }
                    // console.log(sqrs[i])
                    }
                    

                }
                
                dataConn.on('data', data=>{
                    console.log(data)
                    if(data === 'exit'){
                      
                      ticConnection = undefined
                      
                      document.getElementById('gamePanel').style.display = 'flex'
                      document.getElementById('gameConsole').style.display = 'none'
                      reset('notbtn')
                      return;
                    }
                    if(data === 'reset'){
                        reset('notbtn')
                        return;
                    }
                    if(data === 'rejected'){
                        alert('HE/SHE refused to play.')
                        dataConn = undefined
                        ticConnection = undefined
                        document.getElementById('gamePanel').style.display = 'flex'
                        document.getElementById('gameConsole').style.display = 'none'
                        return;
                    }
                    if(data === 'GO'){
                        winner.innerHTML="YOU LOOSE ❤️"
                        GAME_OVER = true
                        return
                    }
                    mark(data,'O')
                    turn.innerHTML= "NOW TURN IS YOURS"
                    _turn = 0
                })
                dataConn.on('close', ()=>{
                    alert('HE/SHE denied.')
                })
                
            }

            function isWinner(sign){
                // const sqrs = document.getElementsByClassName('squares')
                const squares = Array(9).fill(null)
                for(var i=0;i<9;i++){
                    squares[i] = document.getElementById(i.toString()).firstChild.innerHTML
                }
                console.log( squares)
                const lines = [
                    [0, 1, 2],
                    [3, 4, 5],
                    [6, 7, 8],
                    [0, 3, 6],
                    [1, 4, 7],
                    [2, 5, 8],
                    [0, 4, 8],
                    [2, 4, 6],
                ];
                for (let i = 0; i < lines.length; i++) {
                    const [a, b, c] = lines[i];
                    if (squares[a]===sign && squares[a] === squares[b] && squares[a] === squares[c]) {
                        return sign;
                    }
                }
                return null;
            }
          
            function exitTic(){
              ticConnection.send('exit');
              setTimeout(() => {
                ticConnection = undefined
                // dataConn.close()
              }, 2000);
              reset('btn')
              document.getElementById('gamePanel').style.display = 'flex'
              document.getElementById('gameConsole').style.display = 'none'
              
            }


            //AUDIO
            
            function setVolume(value) {
              const player = document.getElementById('audioPlayer')
              player.volume = value
              console.log(value)
            }
            async function startAudioCall(){
                if( audioCall === undefined){

                    const parent = document.getElementById('callControl')
                    const player = document.getElementById('audioPlayer')
                    const durLabel = document.getElementById('callTiming')
                    document.getElementById('volumeRange').style.display = 'none'
                    durLabel.style.display = 'none'

                    parent.style.display = 'flex'
                    try{
                        var stream = await navigator.mediaDevices.getUserMedia({video:false, audio:true})
                    }catch( err){
                        console.log( 'cannot get the user media stream')
                        return
                    }
                    const d = new Date()
                    var callStartTIme = d.getTime()
                    var presentTIme
                    const mediaCon = peer.call( peerId, stream ,  {metadata:{isAudio:true}})
                    mediaCon.on( 'stream' , (stream)=>{
                        player.srcObject = stream
                        player.play()
                        // setTimeout(()=>{
                        //   callDur = player.duration
                        //   console.log( player)
                        //   durLabel.innerHTML = callDur
                        // },1000)
                        presentTIme = d.getTime()
                        durLabel.innerHTML = (presentTIme-callStartTIme)/1000
                        console.log( presentTIme-callStartTIme)
                        
                    })

                    mediaCon.on('close', () => {
                        alert('HE/SHE cut the call')
                        console.log('caller closed called')
                        audioCall = undefined
                        endAudioCall()
                    })
                    
                    audioCall = mediaCon
                }else{
                    alert('you already have an audio channel exists, use that')
                    return
                }
            }
            function endAudioCall(){
                const parent = document.getElementById('callControl')
                parent.style.display = 'none'
                if(audioCall === undefined)
                    return
                console.log('audio-call',audioCall)
                audioCall.close()
                audioCall = undefined

            }


            //STREAM
            function stopStream() {
              //make stream button visble
              //make stop stream button unvisible
              //this function is called by the streamer, just like we are pressing the button
              //provided by the browser
              streamCall.close()
              streamCall = undefined
              document.getElementById('startStreamBtn').style.display = 'block'
              document.getElementById('stopStreamBtn').style.display = 'none'
              document.getElementById('streamLabel').innerHTML = 'Currently you are not streaming'
            }
            function streamPanel(e) {
              hideEveryThing()
              if( e === undefined){
                document.getElementById('astream').style.backgroundColor = '#dee2e6'
              }
              else{
                clicked(e)
              }
              
              // document.getElementById('stream_parent').style.display = 'flex'

              if(streamCall === undefined)
                document.getElementById('stream_parent_caller').style.display = 'flex'
              else
                document.getElementById('stream_parent_receiver').style.display = 'flex'
            }
            
            async function startCapture(displayMediaOptions) {
                var captureScreen = undefined
                try{
                    captureScreen = await navigator
                                        .mediaDevices
                                        .getDisplayMedia(displayMediaOptions)
                }catch( err){
                    console.log( err)
                    return
                }
                return captureScreen
            }
            function stopCapture(Stream){
              Stream.getTracks().forEach(function(track) {
                if (track.readyState == 'live') {
                    track.stop();
                }
                // track.stop();
              });
            }
            async function stream(){
                if( streamCall === undefined){
                    startCapture({displaySurface:['application' , 'browser', 'monitor', 'window']})
                    .then((screenStream)=> {

                        console.log( screenStream)
                        streamCall = peer.call(peerId, screenStream ,{metadata: {isStreaming : true}})
                        streamCall.on('close', ()=>{
                          stopCapture(screenStream)
                          
                        })
                        document.getElementById('streamLabel').innerHTML = 'Currently you are streaming'
                        document.getElementById('startStreamBtn').style.display = 'none'
                        document.getElementById('stopStreamBtn').style.display = 'block'

                    }).catch( err => {
                      console.log(err);
                    })
                }
                
                
            }
            function endStreamCall() {
              //This function will be called by the stream receiver
                const parent = document.getElementById('stream_parent_receiver')
                parent.style.display = 'none'
                document.getElementById('stream_parent_caller').style.display = 'flex'
                if(streamCall === undefined)
                    return;
                streamCall.close()
                streamCall = undefined
                streamPanel()
            }
    </script>
    
  </body>
</html>
